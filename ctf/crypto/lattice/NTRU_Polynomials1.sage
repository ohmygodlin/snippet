#https://zhuanlan.zhihu.com/p/360389931

import random
n = 53
p = 257
q = 28019
h = [6022, 8610, 3987, 2819, 8381, 22651, 21270, 5458, 8150, 27822, 10059, 1768, 20693, 7355, 6030, 11303, 2697, 23641, 3381, 15555, 14223, 26233, 3534, 10423, 6791, 9792, 24061, 22631, 14944, 2961, 11797, 2865, 9488, 11543, 20005, 7873, 16115, 21557, 18561, 18435, 16708, 7373, 16947, 1976, 12420, 24145, 21848, 23059, 23510, 24769, 11177, 10616, 14443]
ct1 = [15860, 15100, 858, 7485, 10104, 6811, 12726, 11382, 17573, 7840, 3604, 9684, 9252, 2777, 19024, 3198, 18006, 22102, 8866, 16964, 24770, 6809, 13584, 21985, 27047, 3293, 22637, 9793, 9471, 185, 13535, 25592, 17877, 4373, 955, 8192, 27073, 1949, 9239, 4022, 22838, 5708, 1757, 22080, 4083, 19756, 10572, 21907, 22666, 7552, 5438, 24215, 7367]
c=(20,20,20)
ks={}
while True:
    rnds=[random.randint(1,10)for i in range(n*2)]
    #rnds=[8]*n+[1]*n
    M=Matrix(n*2,n*2)
    for i in range(n):
        M[i,i]=q*rnds[i]
    for i in range(n):
        for j in range(n):
            M[i+n,j]=h[(j-i)%n]*rnds[j]
    for i in range(n):
        M[i+n,i+n]=1*rnds[i+n]
    M2=M.LLL()
    # print(M2[0])
    # print(M2[1])
    ts=[]
    rcnt=0
    for i in range(n*2):
        tl=list(M2[i])[:n]
        tr=list(M2[i])[n:]
        for j in range(n):
            tl[j]=tl[j]//rnds[j]%q
            tr[j]=tr[j]//rnds[j+n]%q
        # if tr[0] >= p-q:
        #     tr[0]-=1
        # elif tr[0] < p:
        #     tr[0]+=1
        cntl=0
        for j in tl:
            if j%q >= q-p or j%q==0 or j%q <= p:
                cntl+=1
        cntr=0
        for j in tr:
            if j%q >=q-p or j%q==0 or j%q <= p:
                cntr+=1
        if cntl==n and cntr==n and sum(tl):
            print(tl,tr)
            exit()
        if cntl>=n-1 or cntr>=n-1:
            if str(tr) not in ks:
                print(cntl,cntr,tr)
                ks[str(tr)]=1
            rcnt+=1
    print(rcnt,len(ks))

# Then do the decrypt    
N=53
p=257
q=28019
d=18

Q.<x> = Zmod(q)[]
P.<y> = Zmod(p)[]
R.<y> = ZZ['y']

def modCoeffs(f,pp):
    clist=f.list()
    clist = [Integer(t) for t in clist]
    p2=pp/2
    for i in range(len(clist)):
        clist[i] = clist[i]%pp
        if clist[i]>p2:
            clist[i]-=pp
    return R(clist)


ex = 7367*x^52 + 24215*x^51 + 5438*x^50 + 7552*x^49 + 22666*x^48 + 21907*x^47 + 10572*x^46 + 19756*x^45 + 4083*x^44 + 22080*x^43 + 1757*x^42 + 5708*x^41 + 22838*x^40 + 4022*x^39 + 9239*x^38 + 1949*x^37 + 27073*x^36 + 8192*x^35 + 955*x^34 + 4373*x^33 + 17877*x^32 + 25592*x^31 + 13535*x^30 + 185*x^29 + 9471*x^28 + 9793*x^27 + 22637*x^26 + 3293*x^25 + 27047*x^24 + 21985*x^23 + 13584*x^22 + 6809*x^21 + 24770*x^20 + 16964*x^19 + 8866*x^18 + 22102*x^17 + 18006*x^16 + 3198*x^15 + 19024*x^14 + 2777*x^13 + 9252*x^12 + 9684*x^11 + 3604*x^10 + 7840*x^9 + 17573*x^8 + 11382*x^7 + 12726*x^6 + 6811*x^5 + 10104*x^4 + 7485*x^3 + 858*x^2 + 15100*x + 15860

hx = 14443*x^52 + 10616*x^51 + 11177*x^50 + 24769*x^49 + 23510*x^48 + 23059*x^47 + 21848*x^46 + 24145*x^45 + 12420*x^44 + 1976*x^43 + 16947*x^42 + 7373*x^41 + 16708*x^40 + 18435*x^39 + 18561*x^38 + 21557*x^37 + 16115*x^36 + 7873*x^35 + 20005*x^34 + 11543*x^33 + 9488*x^32 + 2865*x^31 + 11797*x^30 + 2961*x^29 + 14944*x^28 + 22631*x^27 + 24061*x^26 + 9792*x^25 + 6791*x^24 + 10423*x^23 + 3534*x^22 + 26233*x^21 + 14223*x^20 + 15555*x^19 + 3381*x^18 + 23641*x^17 + 2697*x^16 + 11303*x^15 + 6030*x^14 + 7355*x^13 + 20693*x^12 + 1768*x^11 + 10059*x^10 + 27822*x^9 + 8150*x^8 + 5458*x^7 + 21270*x^6 + 22651*x^5 + 8381*x^4 + 2819*x^3 + 3987*x^2 + 8610*x + 6022

gx, fx = [0, 28018, 0, 1, 28018, 28018, 1, 1, 0, 1, 0, 0, 1, 28018, 28018, 28018, 1, 0, 0, 28018, 1, 0, 1, 1, 28018, 1, 0, 28018, 0, 0, 0, 0, 28018, 1, 1, 1, 28018, 28018, 1, 28018, 0, 28018, 1, 28018, 0, 28018, 28018, 0, 0, 1, 28018, 1, 1], [28018, 28018, 0, 1, 0, 1, 28018, 28018, 0, 28018, 28018, 28018, 28018, 28018, 0, 1, 0, 28018, 1, 28018, 1, 1, 0, 0, 0, 0, 1, 28018, 0, 1, 0, 28018, 1, 0, 28018, 0, 1, 28018, 1, 1, 1, 1, 0, 0, 1, 1, 1, 28018, 28018, 28018, 1, 1, 0]

gx = Q(gx)
fx = Q(fx)

lhs = (ex * fx).mod(x^N-1)
print(lhs)
lhs = modCoeffs(lhs, q)
print(lhs)
f_list = fx.list()
print(f_list)
f_list = modCoeffs(fx, q)
fpx = P(f_list).inverse_mod(y^N-1)
print(fpx)
another_mx = P(lhs) * fpx
another_mx = another_mx.mod(y^N-1)
print(another_mx.list())