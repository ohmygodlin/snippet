#Different_RSA, gdqwb-2021, https://zhuanlan.zhihu.com/p/421202600

from tqdm import tqdm

N=28878766272191403823107889041058284169199808521158371682733066050244662799263367156309550269227101325669736027371771826809397253158613924644548712934884421417378014208087639969044807981377186737714340829286082351379351558923920227008127429160092666852532458086422142081205116705084311913772665687970343016885031103707028461199015059765479532800549778386359788105205971343282912784946850071662422979298574392484710573074515486971587923766953069962751794200877653014694387953177200024644885244403712103579400266188539111892932620741206480403759438884693193946568495787340335563344856666827548302085113710892285188352347515140126494219804766912500865837631112541745039505278461897206316347941630953618889264594051661709309130123886362948041284745802718880863003173754215754620092571809982610688745771085197335609922355484722672895954924759
e

N, e = map(ZZ, (N, e))

def solve_pell (N, e , numTry = 35):
    X = e/(N^2+1-9/4*N)
    cf = continued_fraction (X)
    PR.<xx> = PolynomialRing(Zmod(N))
    p_low = floor(N^(1/4) / (2 ^ 80)) #need to loop to find suitable 80
    for i in tqdm(range ( numTry )):
        denom = cf . denominator ( i )
        numer = cf . numerator ( i )
        y, x = numer, denom
        if (y != 0):
            p_bar = 1/2 * ((abs((N+1)^2 - e*x/y))^(1/2) + (abs((N-1)^2 - e*x/y))^(1/2))
            p_bar = floor(p_bar)
            f = xx + p_bar

            sol = f.small_roots(X=p_low, beta=0.48, epsilon=0.03)
            if (len(sol) != 0):
                print('AOLIGEI!')
                p = ZZ(f(sol[0]))
                print(p)

print(N.nbits())
print(e.nbits())
solve_pell(N, e)