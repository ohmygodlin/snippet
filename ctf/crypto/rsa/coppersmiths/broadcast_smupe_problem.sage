'''IntelligentAlice,redhat-2019
https://xz.aliyun.com/t/6813
https://xz.aliyun.com/t/6746
https://mp.weixin.qq.com/s/MKaMMihP8gPSYKswAxjNqQ
'''
from sage import *
Ciphers = [8190049298225986645065639656298172597926128706450768371303258134744480067344252838541490888036183464705944304534788993901104793815361341756431217860700928158019252752618919437673052832128577726977953950790902559970309709239504865249701468783648614158118356226876181834829777260079340923537145106302704145961190836661375363413110097880213997662546161624163926197325967768410253429584704238310212909716376684130921549808859640649278922277248496022978656354003386568276074858346316327173050731369576404526308212891898482132494538059251451015302281630189059974681450654073047538089109981563439870031087270051532901896822L, 12118101166054737713386215385862569765107262982956699621223784645643668203345111850159614142861485707244381466506582226100758646240135249724760825645393433062905277245716757630096083674730526877271237776864887538290354358982569685278734177038607779153674199245850037034568957234569159850767151815484600506473286544739506911281943726669304436835800686344966600632518764992677531015390701093253398220813342080495059893716294823513371481710159387645437923515728187314225175839309059255201792376404426500260584133880852811820804606509557432184294402579927159295465411669899092463872169344366863225658285149101653314280770L, 9887484300456300595520623612031688678251146878387414430054835973695829209018145262808588372745647358753774687000983364201490851598723206843017098112847809507817609544337906606060745833346649268774527484099195840169324489687610670521196631448843125362924618761884522950334820722646781649048413577544040479011231779746995055291293137891089931525833486648254448725409318928203929425812335323098048511017312062139172751696145233585542737739174853566560679453473281911116854889223297821107086742345653744897917616698868448535242538832252337684047803286413029384471965710853330869361939591782311270549777724426582426397504L, 10264743928707359131544463805310814026845470725339459450989927143636448915725752971467300191235483833067281345363987407069121606418408449718040315887755399642450527187743258711651051843258742687766926297331042890444014696961806718322040371919529389109192682742181200036542478532959853050460768805119561707676380421651988480717259233296225971312250694970016632994495956921482882797143021594027520716473386416978068079933399906689692571847129934888420315774106400328635804169220408569894011289880185332026071218035650991320120479871511430858596915712705177129565890640650937266453397929114287259119427044159139733567641L]
PKs =  [(3,0x5D06D82B8297AA0DEE814C9D76389DD873D7205A15791DE752E7A67DEACE8C0EB70E05598788ACFFF2CACED87BE47E460FABE0B14956B41C62243D09B9DDF02A8DDB7C23B71ADC659B0830D52E21E591F8FD60F987B6E7347787819C37468A85862C395F5E2C8D19F7C9B22B3B0458484F47EA9DD214E383B693CD75ACF8759B363A05F66656F7195140D8DA3F63DDE3479243539C83204582B3C784A26D6CA0368B9C5DB770D8BB0AC70090EACE4B470D354F8776C0C52576FD3C65B9ED5A455D9B5B0AB64F4D55275C9C7B1D66CDFEF09E08769007BF325C2AE76E2F1CDA19A5235B60EE6B4DD4BC9375E611B17D76F574F13C826BD072E400E69EDA78A5E7), (3,0x7285EE01C75EE4F56C95766E7B7CA51FE56681E34294B47347376950F197C06F5AAAC30A4C05C8154EB2C23E731744BB5403B33819E9F151DF99C68844ED7CC552F9AFDC41B34E254F301115EDA225FE4030D2DECD7C464849E230495A10167BC540F6BB6023FF6024DFB75C68167C8846ADBD2A49C7CAB0EC297923CCB35AADD7AB92AF3AF384E43BFF0D5B80A12B120DA9DA21A1ACF8DA0CD8424EB5094B19A6D7BB8D48B7665B5B6DAC40B4CDF667876EA205F17A294EF3422DEFCD5CC0B563A537CB00C9EBC7CC6E6CF90A98F5F1B370B5ED49CD2F477F8BCBBE7F97F24E1BCD3CECB218E9B587ED2D9815279F0BF3172AA7F8E2614C5188E38BF55BA833), (5,0xCB9BA636B19E46C4D9BBF23579A2DEC0908A63DE53AFAC06725A503798C4058F575BCAF72004E08D7B56DD42264EEA7166430D42C60A5EC93755D6EF7C95045B559C076C63BE0EC35D20A715558634D38D46521FACDF8A395192EC7DD7C4624A9DE3531AB833E60C2B94D970C373DD52D64E008D1E36473945E0500241DC030A10CC6AD4C9DC58559A1D13F1752A02028D3FC82BDE5F566DED02A4BDBF65818B355B6522E7C31B611A0CB8A6A5CFA4C804C5A55E9371AEB0490ADA66CECB8C375614F4780ABF43CA3993A469664215CED1B7413CAD75D8A0202CBAD6FCBC7B77110BD2D7749C0B6F0A72DAB8F188E9EF4A9B3962D710D2DD525646D219E0C87B), (5,0x785B2B066DE050747171BD130FF4DD0A5858746A43E34FEE615A2374D8464372605054F89CA7CC870F82F01F464B5F975472F4EFD76C52C8407994E36CD281BEAE9FE1063CCBE7E2C80D0918DDA1DE7EC841CD0055B6ABDFC4BA132FE54826C6A31430414AB19C5612C3E9F586A82B2D4E0C944D91323C27E3B8ADBBF848F0DDFD996E77E2EA44347D8E23FEE8B72BD9636E5CA8718BEF9F300043DB522CF1CEE0F77B578E35FCF9C9E5C2BEFB761CDAF0B7B9341701F8DD588DCA997D018D4730EB0B29137563412501E57D0CCC33D0AFE56D0E49D02F290E263E88B0215EE2781EEADAACAFB3F072245D25C9E739F5F21A421EF460A090D19285D558C626A7)]

cnt = 4
'''
A = sha256( b'Alice' ).hexdigest()
Usernames = ['Alice', 'Bob', 'Carol', 'Dan', 'Erin']
for name in Usernames:
  with open(name+'Cipher.enc', 'rb') as f:
    enc = f.read()
    Cs.append(number.bytes_to_long(enc))
  data = '{"from": "'+A+'", "msg": "'+'\x00'*95+'", "to": "'+sha256( name ).hexdigest()+'"}'
  B.append( number.bytes_to_long(data) )
'''
B = [15544274873612998989866379328566946388285248570806564503108352867340017880252665817613208325183832507901409765669821491355202065667225050801744228447515864518584620720787409961012061302114074543857882368586098987225919736280924738224995075370843988377198544539266275729089636607095220506662375139381261384398438998662059177913249680151096549632879238896603189241688956490787338355571799212913598318011639865738648621731434747681682396930715043552472778331701738091587062917693835229391950847730617837543337471998802061973389340720433170042633451884844390746043635079083497185464124715717119052915013438803576714502781L, 15544274873612998989866379328566946388285248570806564503108352867340017880252665817613208325183832507901409765669821491355202065667225050801744228447515864518584620720787409961012061302114074543857882368586098987225919736280924738224995075370843988377198544539266275729089636607095220506662375139381261384398438998662059177913249680151096549632879238896603189241688956490787338355571799212913598318011639865738648621731434747681682396930715043552472778331701733991049485714120357663081338580983163588987883815040112341393183479429685436337175694444720513269496978577270272192766705854550355666404326847416678342795901L, 15544274873612998989866379328566946388285248570806564503108352867340017880252665817613208325183832507901409765669821491355202065667225050801744228447515864518584620720787409961012061302114074543857882368586098987225919736280924738224995075370843988377198544539266275729089636607095220506662375139381261384398438998662059177913249680151096549632879238896603189241688956490787338355571799212913598318011639865738648621731434747681682396930715043552472778331701733975013351164536846761810221518003737508499946914097096100637765687661509905409601215259297707222064226642851195944006871153076250455284393024429282447139453L, 15544274873612998989866379328566946388285248570806564503108352867340017880252665817613208325183832507901409765669821491355202065667225050801744228447515864518584620720787409961012061302114074543857882368586098987225919736280924738224995075370843988377198544539266275729089636607095220506662375139381261384398438998662059177913249680151096549632879238896603189241688956490787338355571799212913598318011639865738648621731434747681682396930715043552472778331701589854862181106462147799425826854253857934376300883011438202424349714665292087337317053599191773362281316401973462491548123005509792289684035053588675263013501L]


PR = PolynomialRing(ZZ, 'x')
x = PR.gen()

Fs = []
for i in range(4):
    #m_i = (high<<1368) + (x<<608) + low
    #m_i = 2^608*x + ((high<<1368) + low), make B = (high<<1368) + low
    f =  PR( ( 2**608*x + B[i] )**PKs[i][0] - Ciphers[i] )
    ff = f.change_ring( Zmod(PKs[i][1]) )
    ff = ff.monic()
    f = ff.change_ring(ZZ)
    Fs.append(f)

F = crt( [ Fs[0]**2, Fs[1]**2, x*Fs[2], x*Fs[3] ], [ PKs[i][1] for i in range(4) ] )

M = reduce( lambda x, y: x * y, [ PKs[i][1] for i in range(4) ] )
FF = F.change_ring( Zmod(M) )

m = FF.small_roots(X=2**760, beta=7./8)[0] #95 * 8 = 760
print m
print hex(int(m))[2:-1].decode('hex')