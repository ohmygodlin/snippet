

# This file was *autogenerated* from the file pell_equation.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_39352 = Integer(39352)#x**2 - d*y**2 = 1, https://zhuanlan.zhihu.com/p/365860557

def basic_solution(d):
  frac = continued_fraction(sqrt(d))
  i = _sage_const_1 
  while True:
    x = frac.numerator(i)
    y = frac.denominator(i)
    if x**_sage_const_2  - d*y**_sage_const_2  == -_sage_const_1 :
      return (x, y)
    i += _sage_const_1 
    
def generic_solution(x0, d, y0):
  m0 = matrix([[x0,d*y0], [y0, x0]])
  x0y0 = matrix([[x0], [y0]])
  m = m0
  while True:
    z = m*x0y0
    yield z[_sage_const_0 ][_sage_const_0 ], z[_sage_const_1 ][_sage_const_0 ]
    m = m*m0
    
d=_sage_const_39352 
(x0, y0) = basic_solution(d)
print(x0, y0, x0**_sage_const_2 -d*y0**_sage_const_2 )

for x,y in generic_solution(x0, d, y0):
  print(x,y, x**_sage_const_2 -d*y**_sage_const_2 )
  raw_input()

